 <div class="section">
   <h2>Register</h2>
 </div>

      <div class="section error-section">
      {{# if errors }}
        {{# each errors }}
        <div class="error-msg">
          <i class="fa fa-times-circle"></i>
            {{ this.msg }}
          <i class="fas fa-times error-msg-close"></i>
        </div>
      {{/each}}
      {{/if}}
      </div>
 
 <div class="section">
 <form action="/users/register" method="POST" class="col s12">
      <div class="row">
        <div class="input-field col s12">
          <input
            type="text"
            id="name"
            name="name"
          />
          <label for="name">Full Name</label>
        </div>
        <div class="input-field col s12">
          <input
            type="email"
            id="email"
            name="email"
            class="form-control"
          />
          <label for="email">Email</label>
        </div>
         <div class="input-field col s12">
          <input
            type="password"
            id="password"
            name="password"
            class="form-control"
          />
          <label for="password">Password</label>
        </div>
		  <div class="input-field col s12">
          <input
            type="password"
            id="password2"
            name="password2"
            class="form-control"
          />
          <label for="password2">Confirm Password</label>
          </div>
		  <div class="input-field col s12">
        <a class="a-back" href="/"><span><i class="fas fa-angle-left"></i></span> Back</a>
			  <button type="submit" class="waves-effect waves-light btn btn-registerLogin">Register</button>
        </div>
        <div class="section">
          <a href="/users/login" class="a-alhaccount">Already have an account? <b>Log In</b></a>
        </div>
      </div>
    </form>
  </div>   

  <script>

    // Displaying and animating validation messages
    var errorMsgClose = document.querySelectorAll('.error-msg-close');

    function closeMessage(i) {
        setTimeout(() => {

            if(errorMsgClose[i].parentNode.classList.contains('hidden')) {
                errorMsgClose[i].parentNode.classList.remove('hidden')

                setTimeout(() => {
                    errorMsgClose[i].parentNode.classList.remove('visuallyhidden')
                }, 20)
            } else {
                errorMsgClose[i].parentNode.classList.add('visuallyhidden')
                errorMsgClose[i].parentNode.addEventListener('transitionend', function(e) {
                    errorMsgClose[i].parentNode.classList.add('hidden');
                    }, {
                    capture: false,
                    once: true,
                    passive: false
                });
            }
            //errorMsgClose[i].parentNode.style.display = "none";
        }, 1000 * i + (10000 - (i * 200)))
    }

    errorMsgClose.forEach((item, index) => {
        item.onclick = function(e) {
        e.stopPropagation();
        this.parentNode.style.display = "none";
        }
        closeMessage(index)
    })
  </script>